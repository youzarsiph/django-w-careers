# Generated by Django 5.2.4 on 2025-09-15 07:24

import django.db.models.deletion
import django_countries.fields
import wagtail.contrib.forms.models
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0095_groupsitepermission"),
    ]

    operations = [
        migrations.CreateModel(
            name="FormField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "clean_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Safe name of the form field, the label converted to ascii_snake_case",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the form field",
                        max_length=255,
                        verbose_name="label",
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("singleline", "Single line text"),
                            ("multiline", "Multi-line text"),
                            ("email", "Email"),
                            ("number", "Number"),
                            ("url", "URL"),
                            ("checkbox", "Checkbox"),
                            ("checkboxes", "Checkboxes"),
                            ("dropdown", "Drop down"),
                            ("multiselect", "Multiple select"),
                            ("radio", "Radio buttons"),
                            ("date", "Date"),
                            ("datetime", "Date/time"),
                            ("hidden", "Hidden field"),
                        ],
                        max_length=16,
                        verbose_name="field type",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(default=True, verbose_name="required"),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.",
                        verbose_name="choices",
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True,
                        help_text="Default value. Comma or new line separated values supported for checkboxes.",
                        verbose_name="default value",
                    ),
                ),
                (
                    "help_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="help text"
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "to_address",
                    models.CharField(
                        blank=True,
                        help_text="Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.",
                        max_length=255,
                        validators=[wagtail.contrib.forms.models.validate_to_address],
                        verbose_name="to address",
                    ),
                ),
                (
                    "from_address",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="from address"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="subject"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("full-time", "Full-time"),
                            ("part-time", "Part-time"),
                            ("contract", "Contract"),
                            ("internship", "Internship"),
                            ("temporary", "Temporary"),
                        ],
                        help_text="Job type",
                        verbose_name="type",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("junior", "Junior"),
                            ("mid", "Mid"),
                            ("senior", "Senior"),
                            ("lead", "Lead"),
                            ("manager", "Manager"),
                        ],
                        help_text="Job seniority level",
                        verbose_name="seniority level",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True,
                        help_text="Job apply link (if external)",
                        null=True,
                        verbose_name="link",
                    ),
                ),
                (
                    "is_remote",
                    models.BooleanField(
                        default=False,
                        help_text="Designates if job is remote",
                        verbose_name="is remote",
                    ),
                ),
                (
                    "is_open",
                    models.BooleanField(
                        default=True,
                        help_text="Designates if job is open for applications",
                        verbose_name="is remote",
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Job salary",
                        max_digits=10,
                        null=True,
                        verbose_name="salary",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Country",
                        max_length=2,
                        null=True,
                        verbose_name="country",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Job description",
                        max_length=256,
                        verbose_name="description",
                    ),
                ),
                (
                    "details",
                    wagtail.fields.StreamField(
                        [
                            ("quote", 0),
                            ("paragraph", 1),
                            ("video", 2),
                            ("image", 3),
                            ("document", 4),
                        ],
                        block_lookup={
                            0: (
                                "wagtail.blocks.BlockQuoteBlock",
                                (),
                                {"help_text": "Quote"},
                            ),
                            1: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"help_text": "Rich Text"},
                            ),
                            2: (
                                "wagtail.embeds.blocks.EmbedBlock",
                                (),
                                {"help_text": "Video"},
                            ),
                            3: (
                                "wagtail.images.blocks.ImageBlock",
                                [],
                                {"help_text": "Image"},
                            ),
                            4: (
                                "wagtail.documents.blocks.DocumentChooserBlock",
                                (),
                                {"help_text": "Document"},
                            ),
                        },
                        help_text="Job details",
                        verbose_name="details",
                    ),
                ),
                (
                    "message",
                    wagtail.fields.RichTextField(
                        help_text="Message to display after applying for job",
                        verbose_name="message",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail.contrib.forms.models.FormMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
    ]
